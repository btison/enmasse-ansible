---

# create project
- include_role: 
    name: openshift_create_project

# work directory
- name: clean tmp directory
  file:
    state: absent
    path: "{{ enmasse_tmp_dir }}"

- name: create tmp directory
  file:
    state: directory
    path: "{{ enmasse_tmp_dir }}"

# service account
- name: check if service account for address-controller exists
  shell: "{{ openshift_cli }} get sa enmasse-admin -n {{ project_name }}"
  register: address_controller_service_account_exists
  ignore_errors: true
  changed_when: false

- name: create service account for address controller
  shell: "{{ openshift_cli }} create sa enmasse-admin -n {{ project_name }}"
  when: address_controller_service_account_exists is failed

- name: give project view rights to default user
  shell: "{{ openshift_cli }} adm policy add-role-to-user view system:serviceaccount:{{ project_name }}:default -n {{ project_name }}"
  ignore_errors: true

- name: give project admin rights to enmasse-admin service account
  shell: "{{ openshift_cli }} adm policy add-role-to-user admin system:serviceaccount:{{ project_name }}:enmasse-admin -n {{ project_name }}"
  ignore_errors: true

- name: check if service account for address-space-admin exists
  shell: "{{ openshift_cli }} get sa address-space-admin -n {{ project_name }}"
  register: address_space_admin_service_account_exists
  ignore_errors: true
  changed_when: false

- name: create service account for address controller
  shell: "{{ openshift_cli }} create sa address-space-admin -n {{ project_name }}"
  when: address_space_admin_service_account_exists is failed

- name: give project admin rights to address-space-admin service account
  shell: "{{ openshift_cli }} adm policy add-role-to-user admin system:serviceaccount:{{ project_name }}:address-space-admin -n {{ project_name }}"
  ignore_errors: true

# name: address space plans
- name: check if brokered address space plan exists
  shell: "{{ openshift_cli }} get configmap address-space-plan-brokered -n {{ project_name }}"
  register: brokered_address_space_plan_exists
  ignore_errors: true
  changed_when: false
  when: address_space_type == 'brokered'

- name: create brokered address space plan
  shell: "{{ openshift_cli }} apply -f {{ role_path }}/files/templates/brokered-plans.yaml -n {{ project_name }}"
  when: >
    (address_space_type == 'brokered') and
    (brokered_address_space_plan_exists is failed)

- name: check if standard address space plan exists
  shell: "{{ openshift_cli }} get configmap address-space-plan-standard -n {{ project_name }}"
  register: standard_address_space_plan_exists
  ignore_errors: true
  changed_when: false
  when: address_space_type == 'standard'

- name: create standard address space plan
  shell: "{{ openshift_cli }} apply -f {{ role_path }}/files/templates/standard-plans.yaml -n {{ project_name }}"
  when: >
    (address_space_type == 'standard') and
    (standard_address_space_plan_exists is failed)

# address-controller tls secret
- name: check if address-controller secret exists
  shell: "{{ openshift_cli }} get secret {{ address_controller_secret_name }} -n {{ project_name }}"
  register: address_controller_secret_exists
  ignore_errors: true
  changed_when: false

- import_tasks: deploy_tls_secret.yml
  when: address_controller_secret_exists is failed
  vars: 
    crt_cn: "address-controller.{{ project_name }}.svc.cluster.local"
    crt_out: "{{ enmasse_tmp_dir}}/address-controller.crt"
    key_out: "{{ enmasse_tmp_dir}}/address-controller.key"
    tls_secret_name: "{{ address_controller_secret_name }}"

# none-authservice tls secret
- name: check if none-authservice secret exists
  shell: "{{ openshift_cli }} get secret {{ none_authservice_secret_name }} -n {{ project_name }}"
  register: none_authservice_secret_exists
  ignore_errors: true
  changed_when: false

- import_tasks: deploy_tls_secret.yml
  when: >
    (none_authservice_secret_exists is failed) and
    (none_authservice is defined and none_authservice|bool == true)
  vars: 
    crt_cn: "none-authservice.{{ project_name }}.svc.cluster.local"
    crt_out: "{{ enmasse_tmp_dir}}/none-authservice.crt"
    key_out: "{{ enmasse_tmp_dir}}/none-authservice.key"
    tls_secret_name: "{{ none_authservice_secret_name }}"

# deploy none-authservice
- name: check if none-authservice is deployed
  shell: "{{ openshift_cli }} get service {{ none_authservice_service_name }} -n {{ project_name }}"
  register: none_authservice_deployed
  ignore_errors: true
  changed_when: false

- name: deploy none-authservice
  shell: "{{ openshift_cli }} process -f {{ role_path }}/files/templates/none-authservice.yaml | {{ openshift_cli }} create -f - -n {{ project_name }}"
  when: >
    (none_authservice_deployed is failed) and
    (none_authservice is defined and none_authservice|bool == true)

# standard-authservice tls secret
- name: check if standard-authservice secret exists
  shell: "{{ openshift_cli }} get secret {{ standard_authservice_secret_name }} -n {{ project_name }}"
  register: standard_authservice_secret_exists
  ignore_errors: true
  changed_when: false

- import_tasks: deploy_tls_secret.yml
  when: >
    (standard_authservice_secret_exists is failed) and
    (standard_authservice is defined and standard_authservice|bool == true)
  vars: 
    crt_cn: "standard-authservice.{{ project_name }}.svc.cluster.local"
    crt_out: "{{ enmasse_tmp_dir}}/standard-authservice.crt"
    key_out: "{{ enmasse_tmp_dir}}/standard-authservice.key"
    tls_secret_name: "{{ standard_authservice_secret_name }}"

# standard-authservice keycloak credentials
- name: check if keycloak-credentials secret exists
  shell: "{{ openshift_cli }} get secret keycloak-credentials -n {{ project_name }}"
  register: standard_authservice_keycloak_secret_exists
  ignore_errors: true
  changed_when: false

- name: create secret with keycloak admin credentials
  shell: |
    {{ openshift_cli }} create secret generic keycloak-credentials \
    --from-literal=admin.username={{ standard_authservice_keycloak_admin_username }} \
    --from-literal=admin.password={{ standard_authservice_keycloak_admin_password }} \
    -n {{ project_name }}
  when: >
    (standard_authservice_keycloak_secret_exists is failed) and
    (standard_authservice is defined and standard_authservice|bool == true)

# deploy standard authservice
- name: check if standard-authservice exists
  shell: "{{ openshift_cli }} get service {{ standard_authservice_service_name }} -n {{ project_name }}"
  register: standard_authservice_deployed
  ignore_errors: true
  changed_when: false

- name: deploy standard-authservice
  shell: "{{ openshift_cli }} process -f {{ role_path }}/files/templates/standard-authservice.yaml | {{ openshift_cli }} create -f - -n {{ project_name }}"
  when: >
    (standard_authservice_deployed is failed) and
    (standard_authservice is defined and standard_authservice|bool == true)

# enmasse template
- name: check if enmasse template exists
  shell: "{{ openshift_cli }} get template brokered-space-infra -n {{ project_name }}"
  register: enmasse_template_exists
  ignore_errors: true
  changed_when: false

- name: install enmasse template
  shell: "{{ openshift_cli}} process -f {{ role_path }}/files/templates/enmasse.yaml | {{ openshift_cli }} create -f - -n {{ project_name }}"
  when: enmasse_template_exists is failed

# external messaging certificate
- name: check if external messaging certificate secret exists
  shell: "{{ openshift_cli }} get secret {{ external_messaging_secret_name }} -n {{ project_name }}"
  register: external_messaging_certificate_secret_exists
  ignore_errors: true
  changed_when: false

- import_tasks: deploy_tls_secret.yml
  when: >
    (external_messaging_certificate_secret_exists is failed) and
    (create_external_messaging_certificate is defined and create_external_messaging_certificate|bool == true)
  vars: 
    crt_cn: "messaging.{{ project_name }}.svc.cluster.local"
    crt_out: "{{ enmasse_tmp_dir}}/messaging.crt"
    key_out: "{{ enmasse_tmp_dir}}/messaging.key"
    tls_secret_name: "{{ external_messaging_secret_name }}"

# address-space
- import_tasks: create_address_space.yml
  when: create_address_space is defined and create_address_space|bool == true

# create address
- import_tasks: create_address.yml
  when: create_address is defined and create_address|bool == true
